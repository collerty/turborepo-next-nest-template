generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../../../packages/zod-schemas/src/generated"
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = true // default is false, enable it if you do not always need to write custom update schemas
  useDefaultValidators             = false // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
  postgenerate                     = "echo 'post generate'" // rebuild the package after generating models
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique @db.VarChar(255)
  name     String    @db.VarChar(100)
  password String    @db.VarChar(255)
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       Int     @id @default(autoincrement())
  title    String  @db.VarChar(255)
  content  String? @db.Text
  author   User?   @relation(fields: [authorId], references: [id])
  authorId Int
  likes    Int?  @db.Integer @default(0)
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([authorId])
}
